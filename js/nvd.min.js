//codekit-prepend "bootstrap/bootstrap.js"

$(function(){
    // @codekit-append "jQueryHelper.js"
    // @codekit-append "bootstrapHelper.js"
    // @codekit-append "debugHelper.js"
    // @codekit-append "fkeyHints.js"
    // @codekit-append "pagination.js"
    // @codekit-append "editable.js"
    // @codekit-append "linkedClassCheckbox.js"
    // @codekit-append "liveFkeys.js"
    // @codekit-append "classIdChangeHandler.js"
    // @codekit-append "photo.js"
    // @codekit-append "print.js"
    // @codekit-append "selectAllButton.js"

	// session_msg auto fade
	setInterval(function(){
		$(".session_msg").fadeOut('slow');
	} , 7000);
	$(".session_msg").click(function() {
		$(this).fadeOut('slow');
	});

	setInterval(function(){
		$(".autoFadeOut").fadeOut('slow');
	} , 2000);
	$(".autoFadeOut").click(function() {
		$(this).fadeOut('slow');
	});

	// confirm delete
	$("a.danger_link").click(function(){
		return confirm("Are you sure?");
	});

	// Table Sorter
	$(".table").tablesorter().find("th").css({ "cursor" : "pointer" });

    // filterOptions
    //$("#filterOptions").find(".form-control").removeClass("form-control");


});
/**
 * Created by EngrNaveed on 05-Jan-15.
 */
(function($) {
    $.fn.getCss = function(cssProp) {
        var value = this.css(cssProp);
        value = value.replace(/px/,'');
        return value;
    };




})(jQuery);
/**
 * Created by EngrNaveed on 29-Dec-14.
 */
var btsp = {
    icon : function(icon){
        return "<span class='glyphicon glyphicon-"+icon+" '></span>";
    },

    showModal : function( options ){
        var markup = "<div id='"+options.id+"' class='modal fade'>";
        markup += "<div class='modal-dialog'>";
        markup += "<div class='modal-content'>";
        markup += "<button type='button' class='close' data-dismiss='modal' aria-hidden='true'>&times;</button>";
        if(options.content){
            markup += options.content;
        }else{
            markup += "<div class='modal-header'>";

            markup += "<h4 class='modal-title'>"+options.title+"</h4>";
            markup += "</div>";
            markup += "<div class='modal-body'>";
            markup += options.body;
            markup += "</div>";
            markup += "<div class='modal-footer'>";
            markup += "<button type='button' class='btn btn-default' data-dismiss='modal'>No</button>";
            markup += "<button id='confirmNewRecord' type='button' class='btn btn-primary'>Yes</button>";
            markup += "</div>";
            markup += "</div>";
        }

        markup += "</div>";
        markup += "</div>";
        $("body").append(markup);
        options.show = true;
        $("#"+options.id).modal(options);
        //return markup;
    },

    waiting: function(){
        return "<div class='progress progress-striped active'><div class='progress-bar'  role='progressbar' aria-valuenow='100' aria-valuemin='0' aria-valuemax='100' style='width: 100%'></div></div>";
    }
};
/**
 * Created by EngrNaveed on 28-Dec-14.
 */

    var print = function(message) {
            var $output = $('<div class="nvd-print-result"><div>');
            $output.append("<p>"+message+"</p>");
            $output.css({
                position: 'fixed',
                bottom: '1em',
                left: '1em',
                padding: '1em',
                border: '1px solid #333',
                backgroundColor: 'rgba(50,50,50,0.5)',
                borderRadius: '0.5em'
            });
            $output.appendTo("body");
    };

    function log(message){
        console.log(message);
    }

function appendTobody(markup) {
    $("body").append("<pre>"+markup+"</pre>");
}

(function($) {
    $.fn.highlight = function() {
        this.css("border","2px solid red");
        this.css("background-color","#fdd");
    };





})(jQuery);
/**
 * Created by EngrNaveed on 12/27/2014.
 */

function showfKeyHints(){
    log("trying to show fkey hints");
    // the fkey input element
    var thisElement = $(this);

    // build form data to send
    var formData = {
        classname: thisElement.data('classname'),
        fieldname: thisElement.data('fieldname'),
        currentValue: thisElement.val()
    };

    // post data
    $.post("ajaxHandlers/foreignKeyHandler.php", formData, function (response) {
        // remove existing hints and append received hints:
        var parentDiv = thisElement.parent();
        parentDiv.find(".fkeyHints").remove();
        parentDiv.css('position','relative').append(response);

        // click functionality of the hint:
        var fkeyHints = thisElement.siblings(".fkeyHints");
        fkeyHints.find(".list-group-item").click(function () {
            var hint = $(this);

            //check if the input is an inputForEditable
            if(thisElement.parent().hasClass('inputForEditable')){
                thisElement.val(hint.data("value"));
                thisElement.attr('autofocus','true');
                fkeyHints.hide();
                return false;
            }

            // insert a hidden input for the frgn. key
            var hiddenIpId = thisElement.attr("id")+"Ip";
            thisElement.after("<input id='"+hiddenIpId+"' type='hidden' name='"+thisElement.attr("name")+"' value='"+hint.data("value")+"'/>");

            // remove the hints
            fkeyHints.hide();

            // replace the input with a link to the external record and a reset button
            var href = hint.attr('href'),
                exLink = "<a href='"+href+"' target='_blank'>"+hint.data("value")+" ("+hint.find(".list-group-item-heading").html()+")</a>",
                resetBtn = "<a href='#' class='danger_link pull-right resetBtn'>"+btsp.icon("remove")+"</a>",
                exlinkWraper = $("<p class='exlink form-control'>"+exLink+" "+resetBtn+"</p>");
            thisElement.after(exlinkWraper);
            thisElement.hide();

            // reset button functionality
            exlinkWraper.find(".resetBtn").click(function () {
                exlinkWraper.remove();
                thisElement.show();
                fkeyHints.show();
                $("#"+hiddenIpId).remove();
                thisElement.keyup(showfKeyHints);
                return false;
            });

            // prevent default and event bubbling
            return false;
        });
    });
}
$(function(){
    // foreign key add record link
    //$(".newFkeyModalLauncher").click(showNewRecModal);
    //var modalCounter = 1;
    $(".fkeyInput").keyup(showfKeyHints);


});

/**
 * Created by EngrNaveed on 31-Dec-14.
 */

$(function(){

    var form = $("#paginationForm"),
        input = $("#res_per_page"),
        disableActiveLinks = $(".pagination .active,.pagination .disabled");

    // auto submit the form when the input is changed
    input.change(function () { form.submit(); });

    // do nothing if a disables or an active link is clicked
    disableActiveLinks.click(function () { return false; });



});

/**
 * Created by EngrNaveed on 04-Jan-15.
 */
$(function () {
    var $editable = $(".editable");

    // adjust the sizes of editables
    $editable.each(function (index, entry) {
        var element = $(entry),
            $parent = element.parent(),
            innerHeight = $parent.innerHeight() - $parent.getCss('padding-bottom') - $parent.getCss('padding-top'),
            innerWidth = $parent.width() - $parent.getCss('padding-left') - $parent.getCss('padding-right');
        //$parent.highlight();
        //log("innerH: "+innerHeight);
        //log("innerW: "+innerWidth);
        //element.height(innerHeight+'px');
        //element.width(innerWidth+'px');
    });

    // bind click event
    $editable.click(editableClickHandler);

    function getValue(jqObj){
        return jqObj.data('value');
    }

    function setInputValue(inputElement,value){
        var type = inputElement.data('type');
        switch(type) {
            case 'textarea':
                inputElement.text(value);
                break;
            case 'select':
                inputElement.find("option").each(function (index,element) {
                    if($(element).text()==value){
                        $(element).attr('selected','true');
                    }
                });
                break;
            default:
                inputElement.val(value);
                break;
        }
    }

    function editableClickHandler(){
        // find the matching input
        // put the matching input inside $this
        // set the value of the matching input
        // in case of enter-key pressed:
        // set the new value
        // store the new value to the db
        // in case of some other key:
        // restore previous value
        // remove the new input

        var $thisEditable = $(this),
            inputContainerId = $thisEditable.attr('id')+"-input",
            $inputContainer = $("#"+inputContainerId).clone(),
            $newInput = $inputContainer.find('.form-control'),
            value = getValue($thisEditable);
        // adjust position
        $inputContainer.css('position','absolute');
        $inputContainer.css('z-index','1');
        $thisEditable.css('position','relative');
        // change id, so that no two elements have same id
        $newInput.attr('id',inputContainerId+'-edit');
        // replacement
        $thisEditable.replaceWith($inputContainer);
        setInputValue($newInput,value);
        // adjust width
        $inputContainer.width($newInput.parent().width());
        $newInput.focus();
        // bind fkey hints
        $(".fkeyInput").keyup(showfKeyHints);
        // the following line of code is a fix for a problem:
        // the <select> inputs don't save on Enter, instead they popup their option tags
        $newInput.keypress(function (e) {
            if (e.keyCode == 13) {return false;}
        });
        // bind event
        $newInput.bind('keyup',function (e){
            if (e.keyCode == 13) { // Enter key
                var newValue = $newInput.val();
                // show waiting
                var $waiting = $(btsp.waiting());
                $inputContainer.replaceWith($waiting);
                // post data to db
                var data = {
                    recordInfo:$thisEditable.data('cell-id'),
                    valueToSave : newValue
                };
                $.post('html_components/records_post_handler.php', data, function (response){
                    if($(response).hasClass('alert-success')){
                        $thisEditable.text(newValue);
                    }
                    $waiting.replaceWith($thisEditable);
                    $("body").append(response);
                    //log(response);
                });
            }else if(e.keyCode == 27){ // Escape key
                $inputContainer.replaceWith($thisEditable);
            }
        });
        // on loosing focus
        $inputContainer.bind('blur',function(){
            $inputContainer.replaceWith($thisEditable);
        });
        // bind again
        // Reason: the handler was bound earlier,
        // we removed the element later and then recreated it
        // There is no binding after recreation
        $editable.click(editableClickHandler);
    }
});
/**
 * Created by EngrNaveed on 08-Jan-15.
 */
$(function () {
    $(".linkedClassCheckbox").click(lccHandler);

    function lccHandler() {
        var thisCheckbox = $(this),
            parentForm = thisCheckbox.parents(".linkedClassForm");
        // post data to db
        var data = parentForm.serialize();
        // show waiting
        var $waiting = $(btsp.waiting());
        thisCheckbox.replaceWith($waiting);
        $.post('html_components/linkedClassCheckbox.php', data, function (response) {
            $("body").append(response);
            $waiting.replaceWith(thisCheckbox);
        });
        thisCheckbox.click(lccHandler);
    }

















});
/**
 * Created by EngrNaveed on 10-01-15.
 */
$(function () {

    var fKeyParentElements = $(".liveFKeyParent");
    fKeyParentElements.change(liveFKeyHandler);
    fKeyParentElements.each(liveFKeyHandler);

    function liveFKeyHandler(){
        var thisElement = $(this),
            targetInputsList = thisElement.data('dependantfields').split(','),
            waiting = $(btsp.waiting());
        for(var i= 0,len=targetInputsList.length; i<len; i++){
            var thisTarget = $("#"+targetInputsList[i]),
                data = {
                    parentField : thisElement.attr('id'),
                    targetField : targetInputsList[i],
                    parentFieldValue: thisElement.val(),
                    classname : thisTarget.data('classname')
                };
            thisTarget.replaceWith(waiting);
            thisTarget.load("ajaxHandlers/liveFKeyHandler.php",data);
            waiting.replaceWith(thisTarget);
        }
        //log(thisElement.parents("form").serialize());
    }



});
/**
 * Created by EngrNaveed on 13-01-15.
 */
$(function (){

    var classInput = $("#class_id,#class");
    // set value as the page loads
    performFunctions();
    // set value as class id is changed
    classInput.change(function () {
        performFunctions();
    });

    function setValues(){
        var classInputVal = classInput.val();
        var inputName = classInput.attr('id');
        var data = (inputName == "class_id") ? { classId : classInputVal } : { class:classInputVal };
        $.post("ajaxHandlers/classIdChangeHandler.php",data, function (res){
            var data = JSON.parse(res);
            for( var key in data ){
                $("#"+key).val(data[key]);
            }
            // subject combinations
            if(data.subjCombs && data.subjCombs.toString() != ""){
                var markup = "<select id='subj_combination' name='subj_combination' class='form-control'>";
                for( var subcomb in data.subjCombs){
                    subcomb = data.subjCombs[subcomb];
                    markup = markup + "<option value='"+subcomb['id']['val']+"'>"+subcomb['title']['val']+"</option>";
                    //log(subcomb);
                }
                markup = markup + "</select>";
            }else{
                markup = "<input id='subj_combination' name='subj_combination' class='form-control'>";
            }
            $("#subj_combination").replaceWith(markup);
        });
    }

    function performFunctions(){ setValues(); }

});
/**
 * Created by EngrNaveed on 31-Dec-14.
 */

$(function(){
// update student picture
    var $photo = $("#photoInput");
    $photo.change(updateStudentPhoto);

// photo selector
    $photo.css("display" , "none");
    $(".photoThumb").click( function(evt) {
        $photo.get(0).click();
        evt.preventDefault();
    } );

    function updateStudentPhoto(){
        // We are going to:
        // 1. display the thumbnail before uploading
        // 2. upload the image before submitting the form

        // start of step 1:-------------------------------------------
        var $photo = $("#photoInput");
        var file = $photo.get(0).files[0];
        var imageType = /image.*/;

        if (!file.type.match(imageType)) { $("#response").html("Not a valid image file."); return }

        var img = document.createElement("img");
        img.classList.add("obj");
        img.file = file;
        $(".photoThumb img").remove();
        $(".photoThumb").get(0).appendChild(img);

        var reader = new FileReader();
        reader.onload = (function(aImg) {
            return function(e) { aImg.src = e.target.result; };
        })(img);
        reader.readAsDataURL(file);

        // start of step 2---------------------------------------------
        // if FormData is not supported, no need to try to upload
        if (window.FormData) {
            var input = $photo.get(0);
            var formdata = new FormData();

            $("#response").html("Uploading . . .");

            formdata.append("photoInput", file);
            formdata.append( "person_id" , $("#person_id").val() );
            $.ajax({
                url: "ajaxHandlers/photoUploader.php",
                type: "POST",
                data: formdata,
                processData: false,
                contentType: false,
                success: function (res) {
                    $("#response").html(res);
                    $("#photo .error").remove();
                }
            });
        }
    }
    //function downloadStPhoto(stId){
    //    var formdata = new FormData();
    //    formdata.append("stId" , stId );
    //    $.ajax({
    //        url: "../ajaxHandlers/downloadStPhoto.php",
    //        type: "POST",
    //        data: formdata,
    //        dataType : "html",
    //        processData: false,
    //        contentType: false,
    //        success: function (data) {
    //            $(".photoThumb").html(data);
    //        }
    //    });
    //}

});

/**
 * Created by Engr. Naveed on 09-Feb-15.
 */
$(function () {
    if (window.matchMedia) {
        var mediaQueryList = window.matchMedia('print');
        mediaQueryList.addListener(function(mql) {
            if (mql.matches) { beforePrint(); }
            else { afterPrint(); }
        });
    }

    function beforePrint(){

    }


    function afterPrint(){

    }






});


/**
 * Created by Engr. Naveed on 14-Mar-15.
 *
 * Working:
 * - any element with class "selectAll" will act as a select_all / select_none button
 * - the target checkboxes must have a class name as defined in the 'data-target-class' attribute of the select_all / select_none button
 */
($(function () {
    var selectAllButtons = $(".selectAll");
    selectAllButtons.css("cursor","pointer");
    selectAllButtons.click(function () {
        var targetClass = $(this).data("target-class"),
            targetElements = $("."+targetClass);
        if(targetElements.prop("checked")){
            //log("condition true, attr exists: "+targetElements.prop("checked"));
            targetElements.prop('checked', false);
            //log("condition true, attr changed to: "+targetElements.prop("checked"));
        }else{
            //log("condition false: "+targetElements.attr("checked"));
            targetElements.prop('checked', true);
            //log("condition false, Trying to change attr: "+targetElements.attr("checked"));
        }
    });
}));